#!/bin/bash

# =============================================================
# Jarvis CLI
# 
# Based on the Influx Data Sandbox CLI 
# https://github.com/influxdata/jarvis/blob/master/jarvis
# =============================================================

set -eo pipefail
IFS=$'\n\t'

# Check to see if Docker is installed
if ! [ -x "$(command -v docker)" ]; then
  echo '⚠️ Error: docker is not installed.' >&2
  exit 1
fi

# Check to see if Docker Compose is installed
if ! [ -x "$(command -v docker-compose)" ]; then
  echo '⚠️ Error: docker-compose is not installed.' >&2
  exit 1
fi

jarvis () {
  case $1 in
    up) echo "🚀 Starting all cotainers..."; docker-compose up -d;;
    down) echo "⛔️ Stopping all containers..."; docker-compose down;;
    restart)
      echo "⛔️ Stopping all containers...";
      docker-compose down;
      echo "🚀 Starting all containers...";
      docker-compose up -d;
      echo "✅ Services available!";;
    nuke)
      # Confirm that you really want to nuke everything
      while true; do
          read -p "Are you sure? (Y/N): " yn
          case $yn in
              [Yy]* )
                echo "💥 Nuking the stack";
                docker-compose down;
                echo "🔥 Destroying all data";
                rm -rf ./config/ ./.env;
                break;;
              [Nn]* )
                exit;;
              * )
                echo "Please answer yes or no.";;
          esac
      done;;
    prune)
      echo "⛔️ Stopping and removing running jarvis containers...";
      docker-compose down;
      echo "☠️ Killing any left over containers...";
      docker stop $(docker ps -aq);
      docker rm $(docker ps -aq);
      echo "🔥 Removing all images...";
      docker image prune -a;
      ;;
    enter) docker-compose exec $@ /bin/bash;;
    logs) docker-compose logs -f $@;;
    *)
      cat <<-EOF
jarvis commands:
  up                  -> Spin up the stack
  down                -> Tear down the stack
  restart             -> Restart the stack

  enter [SERVICE]     -> Enter a specified container
  logs  [SERVICE]     -> Stream logs for a specified container

  nuke                -> Nuke the stack and destroy all stored data
  prune               -> Stop and remove all running docker containers and images
EOF
      ;;
  esac
}

pushd `dirname $0` > /dev/null
    jarvis $@
popd > /dev/null
